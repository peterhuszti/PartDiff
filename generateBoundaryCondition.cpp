#include <iostream>
#include <stdlib.h>
#include <fstream>
#include <vector>
#include <time.h>

#define N 5
#define DB (4*N - 4)
#define LO -1
#define HI 1

using namespace std;

int main()
{
	ofstream o("grid.txt");

	o << "This file contains Dirichlet boundary conditions for the multigrid method.\n";
	o << "The default grid is [-1;1]x[-1;1]\n";
	o << "The default range of the condition values: [-1;1], generated by generateBoundaryCondition.cpp\n";
	o << "N\nxi yi u\n";
	o << "Where N the number of point at the bound of the grid\n";
	o << "[xi;yi] a point at the bound of the grid\n";
	o << "u is the condition at this point\n\n";
	o << DB << "\n";

	srand(static_cast <unsigned> (time(0)));
	vector<double> u;
	vector<double> gridPoints;
	
	for(int i=0; i<N; ++i)
	{
		gridPoints.push_back(i*( static_cast<double> (abs(HI)+abs(LO)) )/(N-1) + LO);
	}
	
	for(int i=0; i<DB; ++i)
	{
		u.push_back(LO + static_cast <double> (rand()) /( static_cast <double> (RAND_MAX/(HI-LO))));
	}
	
	for(int i=0; i<N; ++i)
	{
		o << gridPoints[i] << " " << gridPoints[0] << " " << u[i] << "\n";
	}
	for(int i=1; i<N; ++i)
	{
		o << gridPoints[N-1] << " " << gridPoints[i] << " " << u[i+N-1] << "\n";
	}
	for(int i=1; i<N; ++i)
	{
		o << gridPoints[N-i-1] << " " << gridPoints[N-1] << " " << u[i + 2*N - 2] << "\n";
	}
	for(int i=1; i<N-1; ++i)
	{
		o << gridPoints[0] << " " << gridPoints[N-i-1] << " " << u[i + 3*N - 3] << "\n";
	}
	
	o.close();

	return 0;
}
Documentation for the implementation of the multi grid method
Created by Peter Huszti



	Functions:


name:			testSelector
parameters:		integer
return type:	function handler

info:			Based on the input parameter, returns a function, and based upon
				that choice, the program will compute the boundary conditions.
				If there is no such test case, it will give a warning.

_________________________________________________________________________________				

name:			scanBoundaryCondition
parameters:		-
return type:	integer, vector, vector, vector

info:			Scans generated boundary condition from the given 
				..\generateBoundaryCondition\grid.txt
				The returned integer is the number of conditions.
				The first two vectors will contain the conditions' x and y
				coordinates, respectively.
				The last vector contains the conditions.
				
_________________________________________________________________________________				

name:			getBoundCoords
parameters:		vector, vector
return type:	vector, vector

info:			It expects the two coordinate vectors of the boundary conditions.
				Because the coordiante vectors are redundant, it will return 
				two vectors that are not.
				
_________________________________________________________________________________				

name:			initializeGrid
parameters:		vector
return type:	matrix

info:			The grids are stored as matrixes, which contain the z coordinates
				of the functions.
				This method sets the grid matrix's first and last rows and columns 
				based on the boundary conditions, given as input parameter.
				The other elements of the matrix will be set to 0.
				
_________________________________________________________________________________				

name:			createFinerBoundCoords
parameters:		vector, vector
return type:	vector, vector

info:			The method expects not coordinate vectors as inputs, and creates 
				a twice as fine coordinate vector. The new coordinates will be 
				set to the average of its two neighbours.
				
_________________________________________________________________________________				

name:			createFinerGrid
parameters:		matrix
return type:	matrix

info:			Creates a twice as fine grid from the input grid.
				It calculates the new values with the prolongation function.
				
_________________________________________________________________________________				

name:			prolongation
parameters:		integer, integer, matrix
return type:	float

info:			Prolongate the point based on the two input coordinates to the 
				new, finer grid. Uses average to calculate if it is not on the 
				old grid.























